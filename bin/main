#!/usr/bin/env ruby
# frozen_string_literal: true

class Game
  def initialize
    @options = [%w[1 2 3], %w[4 5 6], %w[7 8 9]]
    @turn_counter = 0
    @game_ended = false
    @table = Table.new
    @player_1 = Player.new(1)
    @player_2 = Player.new(2)
    @winner = 'Nobody'
    start
  end

  def about
    @game_description = "Tic-Tac-Toe Game
 In this game, wins that who can mark three numbers in a sequence.
 Players take turns to mark the numbers. The first will have X's as marks,
the second will have O's. They can be in diagonal, horizontal or vertical alignment.
If no number can be chosen, and no three numbers in sequence were chosen,
then there's no winner, and the game ends."
  end

  def intro
    puts ' Let the game begin! '.center(60, '.')
  end

  def start
    turn
  end

  def turn
    until @game_ended
      @turn_counter += 1
      @player = @turn_counter.odd? ? @player_1 : @player_2
      @table.print_table
      puts "It's #{@player.name}'s turn"
      @move = @player.choice
      @pos = @table.get_choice_position(@move)
      @table.mark_choice(@move, @player.mark)
      check_victory(@table.check_for_seq(@pos))
    end

    puts "#{winner} won!"
    end

  def check_victory(sequence)
    if sequence
      @game_ended = true
    end
  end
end

class Table
  def initialize
    @options = [%w[1 2 3], %w[4 5 6], %w[7 8 9]]
  end

  def print_table
    @options.each do |element|
      puts element.each { |x| x }.join(' | ')
    end
  end

  def check_for_seq(position)
    

    @i, @j = position[0], position[1]
    p "i is #{@i}"
    p "j is #{@j}" 
    if @i == 0
      @opposite = 2
    elsif @i == 2
      @opposite = 0
    end
    @player_mark = @options[@i][@j]
    p @player_mark
    if @options[1][1] == @player_mark
      p 'first test'
      p @opposite
      if @j == 0 && @options[@opposite, 3] == @player_mark
        p 'test1'
        true
      elsif @j == 2 && @options[@opposite, 0] == @player_mark
        p 'test2'
        true
      end
    end
    # check if @options[@i].each == @player_mark
    # check if @options[@i].each do |j|
     #       
    #== @options
    false
  end

  def get_choice_position(choice)
    @options.each_with_index do |inner_array, i|
      inner_array.each_with_index do |value, j|
        @position = [i, j] if value == choice
      end
    end
    @position
  end

  def mark_choice(choice, mark)
    @options.each do |inner_array|
      inner_array.map! { |i| i = i == choice ? mark : i }
    end
  end
end

class Player
  def initialize(n_p)
    @@possible_numbers = %w[1 2 3 4 5 6 7 8 9]
    @n_p = n_p
    give_mark
    player_name
  end

  def give_mark
    if @n_p == 1
      @mark = 'X'
    elsif @n_p == 2
      @mark = 'O'
    end
  end

  attr_reader :mark
  attr_reader :choice
  attr_reader :name

  def player_name
    @answer = ''
    if @n_p == 1
      puts "Please, type Player 1's name: "
      @answer = gets.chomp.strip
      while @answer.empty?
        puts "Please, don't leave it blank. Write something."
        @answer = gets.chomp.strip
      end
      @name = @answer
      @@p1_name = @name
      p "Player 1's name is #{@name}"
    elsif @n_p == 2
      puts "Please, type Player 2's name: "
      @answer = gets.chomp.strip
      while @answer.empty? || @answer == @@p1_name
        while @answer.empty?
          puts "Please, don't leave it blank. Write something."
          @answer = gets.chomp.strip
        end
        while @answer == @@p1_name
          puts "This is Player 1's name. Please choose another one."
          @answer = gets.chomp.strip
        end
      end
      @name = @answer
      @@p2_name = @name
      p "Player 2's name is #{@name}"
    end
  end

  def choice
    puts 'Type one of the numbers available to mark your choice'
    @choice = gets.chomp
    until @@possible_numbers.include?(@choice)
      puts 'You must choose a number from 1 to 9 that was still not chosen'
      @choice = gets.chomp
    end
    puts 'Good choice!'
    @@possible_numbers.delete(@choice)
    @choice
  end
end

def pretty_intro
  system 'clear'
  puts ' WELCOME! '.center(60, '.')
  sleep 1.0
  puts ' I love that you are here! '.center(60, '.')
  puts ''.center(60, '.')
  sleep 1.8
  puts ' Since we are all together, how about we play a game? '.center(60, '.')
  sleep 1.0
  puts ' I may be old, but I can be fun! '.center(60, '.')
  puts ' But where are my manners? Let us introduce ourselves! '.center(60, '.')
  sleep 1.0
  puts ' My name is Tic-Tac-Toe. My pleasure! '.center(60, '.')
  sleep 1.0
end

game = Game.new
