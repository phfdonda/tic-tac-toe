#!/usr/bin/env ruby
# frozen_string_literal: true

class Game
  # This class is supposed to contain all game logic.

  def initialize
    @@possible_numbers = %w[1 2 3 4 5 6 7 8 9]
    @game_ended = false
    @table = Table.new
    @player_1 = Player.new(1)
    @player_2 = Player.new(2)
    @winner = 'Nobody'
    start
  end

  def about
    @game_description = "Tic-Tac-Toe Game
 In this game, wins that who can mark three numbers in a sequence.
 Players take turns to mark the numbers. The first will have X's as marks,
the second will have O's. They can be in diagonal, horizontal or vertical alignment.
If no number can be chosen, and no three numbers in sequence were chosen,
then there's no winner, and the game ends."
  end

  def start
    # pretty_start
    turn
  end

  def pretty_start
    system 'clear'
    puts ' WELCOME! '.center(60, '.')
    sleep 1.2
    puts ' I love that you are here! '.center(60, '.')
    puts ''.center(60, '.')
    sleep 1.7
    puts ' Since you are, how about we play a game? '.center(60, '.')

    puts ' Let the game begin! '.center(60, '.')
  end
end

def turn
  @turn_counter = 1

  until @game_ended
    @player = if @turn_counter.odd?
                 game.player_1
               else
                 game.player_2
              end
    puts "It's #{@player.name}'s turn"
  end

  puts "#{winner} won!"
end

def rules(matrix); end

class Table
  def initialize
    @table = [%w[1 2 3], %w[4 5 6], %w[7 8 9]]
  end

  def print_table
    @table.each do |r|
      puts r.each { |x| x }.join(' | ')
    end
  end

  def mark(choice); end
end

class Player
  def initialize(n_p)
    @n_p = n_p
    player_name
  end

  attr_reader :name
  
  def has_a_name
    false if player.name.nil? || player.name.empty?
    true
  end

  def player_name
    @answer = ''
    if @n_p == 1
      puts "Please, type Player 1's name: "
      @answer = gets.chomp
      while @answer.strip.empty?
        puts "Please, don't leave it blank. Write something."
        @answer = gets.chomp
      end
      @name = @answer
      @@p1_name = @name
      p "Player 1's name is #{@name}"
    elsif @n_p == 2
      puts "Please, type Player 2's name: "
      @answer = gets.chomp
      while @answer.strip.empty? || @answer == @@p1_name
        while @answer.strip.empty?
          puts "Please, don't leave it blank. Write something."
          @answer = gets.chomp
        end
        while @answer == @@p1_name
          puts "This is Player 1's name. Please choose another one."
          @answer = gets.chomp
        end
      end
      @name = @answer
      @@p2_name = @name
      p "Player 2's name is #{@name}"
    end
  end

  def player_choice
    # This checks if the player chose a number that was available, provided by the Game instance. If the information is correct, it passes the information to the Game instance as a matrix 3X3.

    attr_writer :choice

    puts 'Type one of the numbers available to mark your choice'

    until @@possible_numbers.include(@choice)
      puts 'You must choose a number from 1 to 9 that was still not chosen'

    end
  end
end

game = Game.new
